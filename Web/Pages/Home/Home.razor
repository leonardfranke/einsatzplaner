@page "/{departmentUrl}/"
@using BlazorBootstrap
@using Web.Extensions
@using Web.Views.Checkbox
@inherits HomeBase

@if(IsPageLoading)
{
    <div class="text-center">
        <div class="spinner-border m-5"></div>
    </div>
    return;
}

@if (FilteredEvents == null)
    return;

<div class="d-flex flex-wrap align-items-center justify-content-between mb-3 gap-2">
    <div class="d-flex flex-wrap align-items-center">
        <div class="form-check form-check-inline">
            <input style="accent-color: red;" type="checkbox" disabled checked/>
            <label class="form-check-label"><Tooltip Placement="TooltipPlacement.Right" Title="Du bist fest als Helfer eingeplant. Du kannst dich nicht mehr austragen.">Fest eingeplant</Tooltip></label>
        </div>
        <div class="form-check form-check-inline">
            <input style="accent-color: orange;" @onclick:preventDefault type="checkbox" checked @onclick="() => { }" />
            <label class="form-check-label"><Tooltip Placement="TooltipPlacement.Right" Title="Du hast dich als verfügbar eingetragen und wurdest als Helfer vorgemerkt. Du kannst dich weiterhin austragen.">Verfügbar und vorgemerkt</Tooltip></label>
        </div>
        <div class="form-check form-check-inline">
            <input style="accent-color: green;" @onclick:preventDefault type="checkbox" checked @onclick="() => { }" />
            <label class="form-check-label"><Tooltip Placement="TooltipPlacement.Right" Title="Du hast dich als verfügbar eingetragen, wurdest aber noch nicht als Helfer ausgewählt. Du kannst dich jederzeit austragen.">Verfügbar</Tooltip></label>
        </div>
        <div class="form-check form-check-inline">
            <input @onclick:preventDefault type="checkbox" @onclick="() => { }" />
            <label class="form-check-label"><Tooltip Placement="TooltipPlacement.Right" Title="Du hast dich nicht als verfügbar eingetragen.">Nicht eingetragen</Tooltip></label>
        </div>
        <div class="form-check form-check-inline">
            <input style=@($"accent-color: black;") type="checkbox" disabled />
            <label class="form-check-label"><Tooltip Placement="TooltipPlacement.Right" Title="Du bist nicht zugelassen dich bei diesem Event in dieser Rolle einzutragen.">Nicht zulässig</Tooltip></label>
        </div>
    </div>

    <div class="d-flex align-items-center gap-2">
        <AuthorizeView Roles="IsAdmin">
            <Authorized>
                <button type="button" class="btn btn-primary" @onclick="() => EditGame(null)">Event erstellen</button>
            </Authorized>
        </AuthorizeView>
        <Dropdown AutoCloseBehavior="DropdownAutoCloseBehavior.Outside" Color="DropdownColor.Secondary">
            <DropdownToggleButton>Sortierung</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => GroupByGroup = !GroupByGroup">
                    <InputCheckbox @bind-Value="GroupByGroup"/> 
                    Nach Gruppe
                </DropdownItem>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => GroupByEventCategory = !GroupByEventCategory">
                    <InputCheckbox @bind-Value="GroupByEventCategory" /> 
                    Nach Eventkategorie
                </DropdownItem>
            </DropdownMenu>
        </Dropdown>
        <Dropdown AutoCloseBehavior="DropdownAutoCloseBehavior.Outside" Color="DropdownColor.Secondary">
            <DropdownToggleButton>Filter</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => HidePastEvents = !HidePastEvents">
                    <InputCheckbox @bind-Value="HidePastEvents" />
                    Vergangene Events ausblenden
                </DropdownItem>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => HideEventsWithoutEntering = !HideEventsWithoutEntering">
                    <InputCheckbox @bind-Value="HideEventsWithoutEntering" />
                    Events ohne Eintragung ausblenden
                </DropdownItem>
                <DropdownItem Type="DropdownItemType.Button" @onclick="() => ShowAllRoles = !ShowAllRoles">
                    <InputCheckbox @bind-Value="ShowAllRoles" />
                    Alle Rollen anzeigen
                </DropdownItem>
            </DropdownMenu>
        </Dropdown>
    </div>
</div>


@{
    var grouping = (GroupByGroup, GroupByEventCategory) switch
    {
        (true, true) => BothEventGrouping,
        (true, false) => GroupEventGrouping,
        (false, true) => CategoryEventGrouping,
        (false, false) => FilteredEvents.GroupBy<Models.Event, object>(@event => null).ToList()
    };
}

@{
    var relevantRoles = GetRelevantRoles();
}
<div class="table-responsive">
    <table class="table">
        <tbody>        
            @foreach (var group in grouping)
            {
                <tr>
                    <th class="pt-5" colspan="100%"><h3>@GetGroupHeading(group)</h3></th>
                </tr>
                <tr>
                    @if (!GroupByGroup)
                    {
                        <th scope="col">Gruppe</th>
                    }
                    @if (!GroupByEventCategory)
                    {
                        <th scope="col">Eventkategorie</th>
                    }
                    <th scope="col">Datum</th>
                    @foreach (var role in relevantRoles)
                    {
                        <th scope="col">@role.Name</th>
                    }
                    <th></th>
                </tr>
                @foreach (var eventObj in group.OrderBy(@event => @event.EventDate))
                {
                    <tr @onmouseenter="() => HoveredEventId = eventObj.Id" @onmouseleave="() => HoveredEventId = null">
                        @if (!GroupByGroup)
                        {
                            var name = GetGroupById(eventObj.GroupId)?.Name;
                            if (string.IsNullOrEmpty(name))
                            {
                                <td scope="col"><i>-</i></td>
                            }
                            else
                            {
                                <td scope="col">@name</td>
                            }
                        }
                        @if (!GroupByEventCategory)
                        {
                            var name = GetEventCategoryById(eventObj.EventCategoryId)?.Name;
                            if (string.IsNullOrEmpty(name))
                            {
                                <td scope="col"><i>-</i></td>
                            }
                            else
                            {
                                <td scope="col">@name</td>
                            }
                        }
                        <td>@eventObj.EventDate.ToString("dd.MM.yyyy HH:mm")</td>
                        @{var helpers = GetHelpers(eventObj);}
                        @foreach (var role in relevantRoles)
                        {
                            var helper = helpers.Find(helper => helper.RoleId == role.Id);
                            <td>
                                @if (helper != null)
                                {
                                    <div class="d-flex align-items-baseline gap-3">
                                        <Web.Views.Checkbox.HelperCheckbox Event="eventObj" Helper="helper" Member="Member" Role="role" Groups="Groups"/>
                                        <AuthorizeView Roles="IsAdmin">                                            
                                            <p>@(helper.GetRegistrationCount())</p>
                                        </AuthorizeView>
                                    </div>
                                }
                            </td>
                        }
                        <td>
                            <div class="btn-group" role="group">
                                <button style="visibility:  @(HoveredEventId == eventObj.Id ? "visible" : "hidden")"
                                        type="button" @onclick="() => OpenGame(eventObj)"
                                        class="btn btn-outline-dark">
                                    <i class="bi bi-search"></i>
                                </button>
                                <AuthorizeView Roles="IsAdmin">
                                    <Authorized>
                                        <button style="visibility:  @(HoveredEventId == eventObj.Id ? "visible" : "hidden")"
                                                type="button" @onclick="() => EditGame(eventObj)"
                                                class="btn btn-outline-dark">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>