@page "/{departmentUrl}/"
@using BlazorBootstrap
@using Web.Extensions
@using Web.Views.Checkbox
@inherits HomeBase

@if(IsPageLoading)
{
    <div class="text-center">
        <div class="spinner-border m-5"></div>
    </div>
    return;
}

<MudStack Row>
    <MudSpacer />
    <AuthorizeView Roles="IsAdmin">
        <Authorized>
            <MudButton OnClick="() => EditGame(null)" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">
                Event erstellen
            </MudButton>
        </Authorized>
    </AuthorizeView>
    <MudButton Variant="Variant.Filled" OnClick="OpenInfoDialog">Hilfe</MudButton>
    <MudMenu Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="Filter">
        <MudMenuItem>
            <MudCheckBox Label="Vergangene Events ausblenden" @bind-Value="HidePastEvents" />
        </MudMenuItem>
        <MudMenuItem>
            <MudCheckBox Label="Events ohne Eintragung ausblenden" @bind-Value="HideEventsWithoutEntering" />
        </MudMenuItem>
        <MudMenuItem>
            <MudCheckBox Label="Alle Rollen anzeigen" @bind-Value="ShowAllRoles" />
        </MudMenuItem>
    </MudMenu>
</MudStack>


@{
    var relevantRoles = GetRelevantRoles();
}

<MudDataGrid Loading="@IsLoadingEventData" @ref="EventsGrid" SortMode="SortMode.None" Items="Events" Groupable="true" Hover Filterable FilterMode="DataGridFilterMode.ColumnFilterMenu" QuickFilter="FilterEvent" @key="relevantRoles.Count()">
    <Columns>
        <PropertyColumn Title="Gruppe" Groupable="true" Property="e => e.GroupId" GroupingChanged="GroupGroupingChanged" Filterable="false">
            <GroupTemplate>
                @{
                    var group = GetGroupById(context.Grouping.Key as string);
                    var name = group?.Name ?? "Sonstiges";
                }
                <MudText>@name</MudText>             
            </GroupTemplate>
            <CellTemplate>
                @{
                    var group = GetGroupById(context.Item.GroupId);
                    var name = group?.Name ?? "-";
                }
                <MudText>@name</MudText>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Title="Eventkategorie" Groupable="true" Property="e => e.EventCategoryId" GroupingChanged="EventCategoryGroupingChanged" Filterable="false">
            <GroupTemplate>
                @{
                    var eventCategory = GetEventCategoryById(context.Grouping.Key as string);
                    var name = eventCategory?.Name ?? "Sonstiges";
                }
                <MudText>@name</MudText>
            </GroupTemplate>
            <CellTemplate>
                @{
                    var eventCategory = GetEventCategoryById(context.Item.EventCategoryId);
                    var name = eventCategory?.Name ?? "-";
                }
                <MudText>@name</MudText>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Title="Datum" Property="e => e.EventDate" Groupable="false" Filterable="true">
            <FilterTemplate>
                <MudCheckBox Label="Vergangene Events ausblenden" @bind-Value="HidePastEvents" />
            </FilterTemplate>
            <CellTemplate>
                @{
                    var dateString = context.Item.EventDate.ToString("dd.MM.yyyy HH:mm");
                }
                <MudText>@dateString</MudText>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.LocationId" Filterable="false" Title="Ort">
            <CellTemplate>
                @GetLocationText(context.Item)
            </CellTemplate>
            <GroupTemplate>
                @GetLocationGroupText(context.Grouping.Key as string)
            </GroupTemplate>
        </PropertyColumn>
        @foreach (var role in relevantRoles)
        {
            <TemplateColumn Title="@role.Name" Context="columnContext" Groupable="false">
                <CellTemplate>
                    @{
                        var helpers = GetHelpers(columnContext.Item);
                        var helper = helpers.Find(helper => helper.RoleId == role.Id);
                        @if (helper != null)
                        {
                            <MudStack Row>
                                <HelperCheckbox Event="@columnContext.Item" Helper="helper" Member="Member" Role="role" Groups="Groups" />
                                <AuthorizeView Roles="IsAdmin">
                                    <MudTooltip Arrow>
                                        <ChildContent>
                                                <MudText>@(helper.GetRegistrationCount())</MudText>
                                        </ChildContent>
                                        <TooltipContent>
                                            @(helper.GetRegisteredMembers(Members))
                                        </TooltipContent>
                                    </MudTooltip>
                                </AuthorizeView>                            
                            </MudStack>
                        }
                    }
                </CellTemplate>
            </TemplateColumn>
        }
        <TemplateColumn Context="columnContext" Groupable="false" >
            <CellTemplate>
                <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                    <MudIconButton Icon="@Icons.Material.Outlined.Search" OnClick="() => OpenGame(columnContext.Item)"></MudIconButton>
                    <AuthorizeView Roles="IsAdmin">
                        <Authorized>
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => EditGame(columnContext.Item)"></MudIconButton>                                        
                        </Authorized>
                    </AuthorizeView>
                </MudButtonGroup>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>