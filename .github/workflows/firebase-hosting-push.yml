# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Test and deploy everything
on: workflow_dispatch

jobs:
  test_supabase_migration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
      - run: supabase start -x gotrue,realtime,storage-api,imgproxy,kong,mailpit,studio,edge-runtime,logflare,vector,supavisor
      - run: supabase link --project-ref ${{ secrets.SUPABASE_PROJECT }}
      - run: supabase dump --linked --file prod_dump.sql
      - run: psql "postgresql://postgres:postgres@127.0.0.1:54322/postgres" -f prod_dump.sql
      - run: supabase migration up --local

  tests_frontend:
    runs-on: ubuntu-latest
    env:
      FIREBASE_AUTH_EMULATOR_HOST: '127.0.0.1:9099'
      FIRESTORE_EMULATOR_HOST: '127.0.0.1:9199'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Install firebase
        run: npm install -g firebase-tools

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore dotnet dependencies
        run: dotnet restore

      - name: Build dotnet projects
        run: dotnet build --no-restore

      - name: Install playwright browsers
        run: pwsh bin/Debug/net8.0/playwright.ps1 install
        working-directory: TestWebsite

      - name: Run api, website and tests
        env:
          MAILJET_API_KEY: ${{ secrets.MAILJET_API_KEY }}
          MAILJET_SECRET_KEY: ${{ secrets.MAILJET_SECRET_KEY }}
        run: |
          dotnet run --no-build --no-restore --project Api &
          dotnet run --no-build --no-restore --project Web &
          cd TestWebsite
          firebase emulators:exec "dotnet test --no-build --no-restore" --config "./emulator_firebase/firebase.json" --project emulator --import "./emulator_firebase/EmptyDepartment/"

  tests_optimizer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore dotnet dependencies
        run: dotnet restore

      - name: Build dotnet projects
        run: dotnet build --no-restore

      - name: Run api, website and tests
        run: |
          cd TestOptimizer
          dotnet test --no-build --no-restore
            
  deploy_backend:   
    runs-on: ubuntu-latest
    needs: [tests_frontend, tests_optimizer, test_supabase_migration]
    if: ${{ success() }}
    outputs: 
      backend-url: ${{ steps.backend-deployment.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCLOUD_SERVICE_ACCOUNT_EINSATZPLANER }}'

      - name: Collect required files for deployment
        run: |
          mkdir deploy
          cp -r Api deploy/Api
          cp -r DTO deploy/DTO
          cp Dockerfile_Api deploy/Dockerfile

      - uses: 'google-github-actions/deploy-cloudrun@v2'
        id: backend-deployment
        with:
          service: einsatzplaner
          region: europe-west1
          source: deploy
          secrets: |-
            FIREBASE_CREDENTIALS=FIREBASE_CREDENTIALS:latest
            MAILJET_API_KEY=MAILJET_API_KEY:latest
            MAILJET_SECRET_KEY=MAILJET_SECRET_KEY:latest
          flags: '--allow-unauthenticated --no-cpu-boost --cpu-throttling --max-instances=1 --min=0 --min-instances=0 --cpu=0.08 --gpu=0 --memory=256Mi --port=8080'

      - run: gcloud artifacts docker images delete europe-west1-docker.pkg.dev/einsatzplaner/cloud-run-source-deploy/einsatzplaner --quiet

  deploy_frontend:
    runs-on: ubuntu-latest
    needs: [tests_frontend, deploy_backend]
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .Net
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Restore dependencies
        run: dotnet restore

      - name: Replace base path
        run: |
          sed -i 's|<base href=".*"|<base href="${{vars.BASE_PATH}}"|' 'Web/wwwroot/index.html'

      - name: Replace backend address
        run: |
          sed -i 's|"BACKEND_ADDRESS": ".*"|"BACKEND_ADDRESS": "${{ needs.deploy_backend.outputs.backend-url }}"|' 'Web/wwwroot/appsettings.json'

      - name: Publish 
        run: dotnet publish Web/Web.csproj -c Release -o Web/out --no-restore
      
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_EINSATZPLANER }}
          channelId: live
          projectId: einsatzplaner

  deploy_supabase:
    runs-on: ubuntu-latest
    needs: [test_supabase_migration, deploy_frontend]
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
      - run: supabase link --project-ref ${{ secrets.SUPABASE_PROJECT }}
      - run: supabase migration up --linked
